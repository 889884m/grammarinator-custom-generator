# Generated by Grammarinator 23.7.post111+gb0dbdcd

from math import inf
from grammarinator.runtime import *

class ipv6Generator(Generator):


    def start(self, parent=None):
        with UnparserRuleContext(self, 'start', parent) as rule:
            current = rule.current
            self.ipv6address(parent=current)
        return current

    def ipv6address(self, parent=None):
        with UnparserRuleContext(self, 'ipv6address', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, ipv6Generator._alt_sizes[0], 0, ipv6Generator._alt_conds[0]) as alt0:
                current = rule.current
                [self.full_address, self.ipv4_linked][alt0()](parent=current)
            current = rule.current
        return current

    def full_address(self, parent=None):
        with UnparserRuleContext(self, 'full_address', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, ipv6Generator._alt_sizes[1], 0, ipv6Generator._alt_conds[1]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self._reserve(13, self.ipv6_group, parent=current)
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 1:
                    self._reserve(13, self.ipv6_comp_st, parent=current)
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 2:
                    self._reserve(11, self.ipv6_comp, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 3:
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_comp, parent=current)
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 4:
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv6_comp, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 5:
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_comp, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 6:
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_comp, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 7:
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_comp, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 8:
                    self._reserve(12, self.ipv6_group, parent=current)
                    self._reserve(10, self.ipv6_group, parent=current)
                    self._reserve(8, self.ipv6_group, parent=current)
                    self._reserve(6, self.ipv6_group, parent=current)
                    self._reserve(4, self.ipv6_group, parent=current)
                    self._reserve(2, self.ipv6_group, parent=current)
                    self.ipv6_comp(parent=current)
                elif choice0 == 9:
                    self._reserve(11, self.ipv6_comp_st, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 10:
                    self._reserve(9, self.ipv6_comp, parent=current)
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 11:
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv6_comp, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 12:
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_comp, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 13:
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_comp, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 14:
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_comp, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 15:
                    self._reserve(10, self.ipv6_group, parent=current)
                    self._reserve(8, self.ipv6_group, parent=current)
                    self._reserve(6, self.ipv6_group, parent=current)
                    self._reserve(4, self.ipv6_group, parent=current)
                    self._reserve(2, self.ipv6_group, parent=current)
                    self.ipv6_comp(parent=current)
                elif choice0 == 16:
                    self._reserve(9, self.ipv6_comp_st, parent=current)
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 17:
                    self._reserve(7, self.ipv6_comp, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 18:
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_comp, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 19:
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_comp, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 20:
                    self._reserve(7, self.ipv6_group, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_comp, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 21:
                    self._reserve(8, self.ipv6_group, parent=current)
                    self._reserve(6, self.ipv6_group, parent=current)
                    self._reserve(4, self.ipv6_group, parent=current)
                    self._reserve(2, self.ipv6_group, parent=current)
                    self.ipv6_comp(parent=current)
                elif choice0 == 22:
                    self._reserve(7, self.ipv6_comp_st, parent=current)
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 23:
                    self._reserve(5, self.ipv6_comp, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 24:
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_comp, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 25:
                    self._reserve(5, self.ipv6_group, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_comp, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 26:
                    self._reserve(6, self.ipv6_group, parent=current)
                    self._reserve(4, self.ipv6_group, parent=current)
                    self._reserve(2, self.ipv6_group, parent=current)
                    self.ipv6_comp(parent=current)
                elif choice0 == 27:
                    self._reserve(5, self.ipv6_comp_st, parent=current)
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 28:
                    self._reserve(3, self.ipv6_comp, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 29:
                    self._reserve(3, self.ipv6_group, parent=current)
                    self._reserve(1, self.ipv6_comp, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 30:
                    self._reserve(4, self.ipv6_group, parent=current)
                    self._reserve(2, self.ipv6_group, parent=current)
                    self.ipv6_comp(parent=current)
                elif choice0 == 31:
                    self._reserve(3, self.ipv6_comp_st, parent=current)
                    self._reserve(1, self.ipv6_group, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 32:
                    self._reserve(1, self.ipv6_comp, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 33:
                    self._reserve(2, self.ipv6_group, parent=current)
                    self.ipv6_comp(parent=current)
                elif choice0 == 34:
                    self._reserve(1, self.ipv6_comp_st, parent=current)
                    self.ipv6_end(parent=current)
                elif choice0 == 35:
                    self.ipv6_comp(parent=current)
                elif choice0 == 36:
                    self.ipv6_comp_st(parent=current)
            current = rule.current
        return current

    def ipv4_linked(self, parent=None):
        with UnparserRuleContext(self, 'ipv4_linked', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, ipv6Generator._alt_sizes[2], 0, ipv6Generator._alt_conds[2]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self._reserve(17, self.ipv6_group, parent=current)
                    self._reserve(15, self.ipv6_group, parent=current)
                    self._reserve(13, self.ipv6_group, parent=current)
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
                elif choice0 == 1:
                    self._reserve(17, self.ipv6_comp_st, parent=current)
                    self._reserve(15, self.ipv6_group, parent=current)
                    self._reserve(13, self.ipv6_group, parent=current)
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
                elif choice0 == 2:
                    self._reserve(15, self.ipv6_comp, parent=current)
                    self._reserve(13, self.ipv6_group, parent=current)
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
                elif choice0 == 3:
                    self._reserve(15, self.ipv6_group, parent=current)
                    self._reserve(13, self.ipv6_comp, parent=current)
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
                elif choice0 == 4:
                    self._reserve(15, self.ipv6_group, parent=current)
                    self._reserve(13, self.ipv6_group, parent=current)
                    self._reserve(11, self.ipv6_comp, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
                elif choice0 == 5:
                    self._reserve(15, self.ipv6_group, parent=current)
                    self._reserve(13, self.ipv6_group, parent=current)
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_comp, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
                elif choice0 == 6:
                    self._reserve(15, self.ipv6_comp_st, parent=current)
                    self._reserve(13, self.ipv6_group, parent=current)
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
                elif choice0 == 7:
                    self._reserve(13, self.ipv6_comp, parent=current)
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
                elif choice0 == 8:
                    self._reserve(13, self.ipv6_group, parent=current)
                    self._reserve(11, self.ipv6_comp, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
                elif choice0 == 9:
                    self._reserve(13, self.ipv6_group, parent=current)
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_comp, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
                elif choice0 == 10:
                    self._reserve(13, self.ipv6_comp_st, parent=current)
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
                elif choice0 == 11:
                    self._reserve(11, self.ipv6_comp, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
                elif choice0 == 12:
                    self._reserve(11, self.ipv6_group, parent=current)
                    self._reserve(9, self.ipv6_comp, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
                elif choice0 == 13:
                    self._reserve(11, self.ipv6_comp_st, parent=current)
                    self._reserve(9, self.ipv6_group, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
                elif choice0 == 14:
                    self._reserve(9, self.ipv6_comp, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
                elif choice0 == 15:
                    self._reserve(9, self.ipv6_comp_st, parent=current)
                    self._reserve(7, self.ipv4_linker, parent=current)
                    self.ipv4_address(parent=current)
            current = rule.current
        return current

    def ipv6_group(self, parent=None):
        with UnparserRuleContext(self, 'ipv6_group', parent) as rule:
            current = rule.current
            self._reserve(1, self.fourhex, parent=current)
            self.COLON(parent=current)
        return current

    def ipv6_comp(self, parent=None):
        with UnparserRuleContext(self, 'ipv6_comp', parent) as rule:
            current = rule.current
            self._reserve(1, self.fourhex, parent=current)
            self.DOUBLECOLON(parent=current)
        return current

    def ipv6_comp_st(self, parent=None):
        with UnparserRuleContext(self, 'ipv6_comp_st', parent) as rule:
            current = rule.current
            self.DOUBLECOLON(parent=current)
        return current

    def ipv6_end(self, parent=None):
        with UnparserRuleContext(self, 'ipv6_end', parent) as rule:
            current = rule.current
            self.fourhex(parent=current)
        return current

    def ipv4_linker(self, parent=None):
        with UnparserRuleContext(self, 'ipv4_linker', parent) as rule:
            current = rule.current
            self._reserve(1, self.IPV4LINK, parent=current)
            self.COLON(parent=current)
        return current

    def ipv4_address(self, parent=None):
        with UnparserRuleContext(self, 'ipv4_address', parent) as rule:
            current = rule.current
            self._reserve(6, self.threeoct, parent=current)
            self._reserve(5, self.PERIOD, parent=current)
            self._reserve(4, self.threeoct, parent=current)
            self._reserve(3, self.PERIOD, parent=current)
            self._reserve(2, self.threeoct, parent=current)
            self._reserve(1, self.PERIOD, parent=current)
            self.threeoct(parent=current)
        return current

    def fourhex(self, parent=None):
        with UnparserRuleContext(self, 'fourhex', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, ipv6Generator._alt_sizes[3], 0, ipv6Generator._alt_conds[3]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self._reserve(3, self.HEXDIGITNOZERO, parent=current)
                    self._reserve(2, self.HEXDIGIT, parent=current)
                    self._reserve(1, self.HEXDIGIT, parent=current)
                    self.HEXDIGIT(parent=current)
                elif choice0 == 1:
                    self._reserve(2, self.HEXDIGITNOZERO, parent=current)
                    self._reserve(1, self.HEXDIGIT, parent=current)
                    self.HEXDIGIT(parent=current)
                elif choice0 == 2:
                    self._reserve(1, self.HEXDIGITNOZERO, parent=current)
                    self.HEXDIGIT(parent=current)
                elif choice0 == 3:
                    self.HEXDIGITNOZERO(parent=current)
            current = rule.current
        return current

    def threeoct(self, parent=None):
        with UnparserRuleContext(self, 'threeoct', parent) as rule:
            current = rule.current
            with AlternationContext(rule, 0, ipv6Generator._alt_sizes[4], 0, ipv6Generator._alt_conds[4]) as alt0:
                current = rule.current
                choice0 = alt0()
                if choice0 == 0:
                    self._reserve(2, self.DECIMAL, parent=current)
                    self._reserve(1, self.DECIMAL, parent=current)
                    self.DECIMAL(parent=current)
                elif choice0 == 1:
                    self._reserve(1, self.DECIMAL, parent=current)
                    self.DECIMAL(parent=current)
                elif choice0 == 2:
                    self.DECIMAL(parent=current)
            current = rule.current
        return current

    def HEXDIGIT(self, parent=None):
        with UnlexerRuleContext(self, 'HEXDIGIT', parent) as rule:
            current = rule.current
            current.src += self._model.charset(current, 0, ipv6Generator._charsets[1])
        return current

    def HEXDIGITNOZERO(self, parent=None):
        with UnlexerRuleContext(self, 'HEXDIGITNOZERO', parent) as rule:
            current = rule.current
            current.src += self._model.charset(current, 0, ipv6Generator._charsets[2])
        return current

    def COLON(self, parent=None):
        with UnlexerRuleContext(self, 'COLON', parent, True) as rule:
            current = rule.current
            current.src += ':'
        return current

    def DOUBLECOLON(self, parent=None):
        with UnlexerRuleContext(self, 'DOUBLECOLON', parent, True) as rule:
            current = rule.current
            current.src += '::'
        return current

    def DECIMAL(self, parent=None):
        with UnlexerRuleContext(self, 'DECIMAL', parent) as rule:
            current = rule.current
            current.src += self._model.charset(current, 0, ipv6Generator._charsets[3])
        return current

    def PERIOD(self, parent=None):
        with UnlexerRuleContext(self, 'PERIOD', parent, True) as rule:
            current = rule.current
            current.src += '.'
        return current

    def IPV4LINK(self, parent=None):
        with UnlexerRuleContext(self, 'IPV4LINK', parent, True) as rule:
            current = rule.current
            current.src += 'ffff'
        return current


    _default_rule = start

    _rule_sizes = {
        'start': RuleSize(4, 1),
        'ipv6address': RuleSize(3, 1),
        'full_address': RuleSize(2, 1),
        'ipv4_linked': RuleSize(3, 10),
        'ipv6_group': RuleSize(2, 2),
        'ipv6_comp': RuleSize(2, 2),
        'ipv6_comp_st': RuleSize(1, 1),
        'ipv6_end': RuleSize(2, 1),
        'ipv4_linker': RuleSize(1, 2),
        'ipv4_address': RuleSize(2, 7),
        'fourhex': RuleSize(1, 1),
        'threeoct': RuleSize(1, 1),
        'HEXDIGIT': RuleSize(0, 0),
        'HEXDIGITNOZERO': RuleSize(0, 0),
        'COLON': RuleSize(0, 0),
        'DOUBLECOLON': RuleSize(0, 0),
        'DECIMAL': RuleSize(0, 0),
        'PERIOD': RuleSize(0, 0),
        'IPV4LINK': RuleSize(0, 0),
    }

    _alt_sizes = (
        (RuleSize(3, 1), RuleSize(4, 10)),  # 0
        (RuleSize(3, 15), RuleSize(3, 14), RuleSize(3, 13), RuleSize(3, 13), RuleSize(3, 13), RuleSize(3, 13), RuleSize(3, 13), RuleSize(3, 13), RuleSize(3, 14), RuleSize(3, 12), RuleSize(3, 11), RuleSize(3, 11), RuleSize(3, 11), RuleSize(3, 11), RuleSize(3, 11), RuleSize(3, 12), RuleSize(3, 10), RuleSize(3, 9), RuleSize(3, 9), RuleSize(3, 9), RuleSize(3, 9), RuleSize(3, 10), RuleSize(3, 8), RuleSize(3, 7), RuleSize(3, 7), RuleSize(3, 7), RuleSize(3, 8), RuleSize(3, 6), RuleSize(3, 5), RuleSize(3, 5), RuleSize(3, 6), RuleSize(3, 4), RuleSize(3, 3), RuleSize(3, 4), RuleSize(3, 2), RuleSize(3, 2), RuleSize(2, 1)),  # 1
        (RuleSize(3, 19), RuleSize(3, 18), RuleSize(3, 17), RuleSize(3, 17), RuleSize(3, 17), RuleSize(3, 17), RuleSize(3, 16), RuleSize(3, 15), RuleSize(3, 15), RuleSize(3, 15), RuleSize(3, 14), RuleSize(3, 13), RuleSize(3, 13), RuleSize(3, 12), RuleSize(3, 11), RuleSize(3, 10)),  # 2
        (RuleSize(1, 4), RuleSize(1, 3), RuleSize(1, 2), RuleSize(1, 1)),  # 3
        (RuleSize(1, 3), RuleSize(1, 2), RuleSize(1, 1)),  # 4
    )

    _alt_conds = (
        (1, 1),  # 0
        (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),  # 1
        (1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),  # 2
        (1, 1, 1, 1),  # 3
        (1, 1, 1),  # 4
    )

    _quant_sizes = (
    )

    _charsets = (
        Generator._charset(((0x20, 0x7f), )),  # 0
        Generator._charset(((0x30, 0x3a), (0x61, 0x67), )),  # 1
        Generator._charset(((0x31, 0x3a), (0x61, 0x67), )),  # 2
        Generator._charset(((0x30, 0x3a), )),  # 3
    )
