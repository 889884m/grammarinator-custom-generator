# Generated by Grammarinator 23.7

import itertools

from math import inf
from grammarinator.runtime import *

class AwsArnGenerator(Generator):


    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def start(self, parent=None):
        with RuleContext(self, UnparserRule(name='start', parent=parent)) as current:
            self.awsArn(parent=current)
            self.EOF(parent=current)
            return current
    start.min_depth = 2

    def awsArn(self, parent=None):
        with RuleContext(self, UnparserRule(name='awsArn', parent=parent)) as current:
            UnlexerRule(src='arn', parent=current)
            UnlexerRule(src=':', parent=current)
            self.partition(parent=current)
            UnlexerRule(src=':', parent=current)
            self.service(parent=current)
            UnlexerRule(src=':', parent=current)
            self.region(parent=current)
            UnlexerRule(src=':', parent=current)
            self.accountId(parent=current)
            UnlexerRule(src=':', parent=current)
            self.resourceType(parent=current)
            self.resourceId(parent=current)
            return current
    awsArn.min_depth = 1

    def partition(self, parent=None):
        with RuleContext(self, UnparserRule(name='partition', parent=parent)) as current:
            with AlternationContext(self, [0, 0, 0], [1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                UnlexerRule(src=['aws', 'aws-cn', 'aws-us-gov'][choice0], parent=current)
            return current
    partition.min_depth = 0

    def service(self, parent=None):
        with RuleContext(self, UnparserRule(name='service', parent=parent)) as current:
            pass
            return current
    service.min_depth = 0

    def region(self, parent=None):
        with RuleContext(self, UnparserRule(name='region', parent=parent)) as current:
            pass
            return current
    region.min_depth = 0

    def accountId(self, parent=None):
        with RuleContext(self, UnparserRule(name='accountId', parent=parent)) as current:
            pass
            return current
    accountId.min_depth = 0

    def resourceType(self, parent=None):
        with RuleContext(self, UnparserRule(name='resourceType', parent=parent)) as current:
            pass
            return current
    resourceType.min_depth = 0

    def resourceId(self, parent=None):
        with RuleContext(self, UnparserRule(name='resourceId', parent=parent)) as current:
            with AlternationContext(self, [0, 0], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                if choice0 == 0:
                    if self._max_depth >= 0:
                        for _ in self._model.quantify(current, 0, min=1, max=inf):
                elif choice0 == 1:
                    UnlexerRule(src='/', parent=current)
            return current
    resourceId.min_depth = 0

    _default_rule = start

    _charsets = {
        0: list(itertools.chain.from_iterable([range(32, 127)])),
    }
